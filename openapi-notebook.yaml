openapi: 3.0.3
info:
  title: Notebook
  version: 0.2.1
  description: REST API for simple notebook with support of pagination

components:
  schemas:
    note:
      type: object
      properties:
        id:
          description: expected to be unique
          type: string
          example: 'That guy'
        name:
          type: string
          example: 'Jhon Doe'
        company:
          type: string
          example: 'Department of tunnels and bridges'
          nullable: true
        phone:
          type: string
          pattern: '^[+]?[0-9]{1,15}$'
          example: '88005553535'
        mail:
          type: string
          example: 'mail@example.com'
        birthdate:
          description: date of birth in format day.month.year
          type: string
          pattern: '^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}$'
          example: '01.02.1931'
          nullable: true
        image_id:
          $ref: '#/components/schemas/image_id'
    noteUpdate:
      description: Any combination of fields from note schema
      type: object
      properties:
        id:
          type: string
          example: 'That guy'
          nullable: true
        name:
          type: string
          example: 'Jhon Doe'
          nullable: true
        company:
          type: string
          example: 'Department of tunnels and bridges'
          nullable: true
        phone:
          type: string
          pattern: '^[+]?[0-9]{1,15}$'
          example: '88005553535'
          nullable: true
        mail:
          type: string
          example: 'mail@example.com'
          nullable: true
        birthdate:
          description: date of birth in format day.month.year
          type: string
          pattern: '^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}$'
          example: '01.02.1931'
          nullable: true
        image_id:
          $ref: '#/components/schemas/image_id'
          nullable: true # fix it
    image_id:
      description: md5 hash of the image used as ID
      type: string
      pattern: '^[0-9a-f]{32}$'
      example: '0f2be6a1cdd6577258612da33fa089a9'

tags:
- name: notes
  description: |
    manages textual information: name, company, phone, etc
- name: images
  description: manages upload, downolad and deletion of images
paths:
  /api/v1/notebook/:
    'get':
      description: |
        Get all existing notes with support of optional SQL-like limit and offset
        query parameters
      tags:
      - notes
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
      - name: offset
        in: query
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/note'

    'post':
      description: |
        Create new note. If ID is empty string then assign some uniquely generated ID
      tags:
      - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/note'
      responses:
        '201':
          description: Note successfully created and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note'
  /api/v1/notebook/{id}/:
    'get':
      description: Get note by its ID
      tags:
      - notes
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note'
    'post':
      description: |
        Update already existing note with specified fields (ID field can alse be updated)
      tags:
      - notes
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noteUpdate'
      responses:
        '200':
          description: Note successfully updated and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note'
    'delete':
      description: Delete note with supplied ID
      tags:
      - notes
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Note have been successfully deleted
  /api/v1/images/:
    'post':
      description: Upload image and return its ID
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image successfully uploaded and its ID is returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_id:
                    $ref : '#/components/schemas/image_id'
  /api/v1/images/{id}/:
    'get':
      description: Get image by its ID
      tags:
      - images
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/image_id'
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
    'delete':
      description: Delete image by its ID
      tags:
      - images
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/image_id'
      responses:
        '204':
          description: Image have been successfully deleted
